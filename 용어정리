@RestController vs @Controller ?

가장 큰 차이는 ResponseBody가 생성되냐 안되냐. Rest는 생성된다.
따라서 return했을 때 RestController는 return값이 그대로 실행되고 Controller는 return에 .jsp(jsp가 기본자였을때)가 실행
예를 들어
@RestController
public class User {
  @GetMapping("/hi")
  public String hi() {
    return "hi";
    }
}
이 경우 localhost/hi 에 접속하면
RestController는 hi가 화면에 나오지만 Controller는 hi.jsp가 실행되고 hi.jsp가 없으면 오류가 발생한다.



그럼 여기서 RequestBody가 무엇인가??
우선 Http 요청 몸체를 자바 객체로 변환시켜 준다 고 생각한다.
 <-> ResponseBody는 자바 객체를 Http 응답 몸체로 변환하는데 사용한다.
즉~!!!!
RequestBody와 ResponseBody를 사용하면 컨트롤러에서 JSON데이터를 주고 받을 수 있다.
JSON형태의 정보를 Map과 커맨드 객체로 변환하기 위해 jackson 라이브러리를 pom.xml에 저장한다.
RequestBody를 사용하면 컨트롤러로 전송된 JSON 정보가 자동으로 Map으로 변환되어 해당변수에 저장된다.
ResponseBody가 붙은 메서드에서 Map을 반환하면 자동으로 Map정보가 JSON 객체로 변환되어 전송된다.



ResponseEntity, RequestEntity란 무엇인가?
Spring에서는 HttpEntity란 클래스를 제공. 이 클래스의 역할은 Http 통신을 이용하는 통신의 header와 body정보를 저장할 수 있다.
이를 상속받은 클래스가 존재하는데 이게 responseEntity랑 requestEntity가 존재한다.
즉 통신메세지 관련 header와 body의 값들을 하나의 객체로 저장하는 것이 HttpEntity클래스의 객체가 된다.
Request일 경우는 RequestEntity, Response일 경우 ResponseEntity가 하게 된다.

만약 header 값을 변경해줘야 하는 경우
@ResponseBody의 경우는 파라미터로 Response객체를 받아서 이 객체에서 header를 변경해준다.
ResponseEntity의 경우 클래스를 생성한 다음에 객체에서 header값을 변경해줘야 한다.

@PathVariable?
말 그대로 url 경로에 변수를 넣어주는 것이다. Restful 서비스의 uri 형태
@RequestMapping(value = "/page/{var}")
public String page(@PathVariable String var) {
  String returnUrl = "";
  if(var.equals("one")) {
        returnUrl = "page1";
    } else if(var.equals("two")) {
        returnUrl = "page2";
    }
    return returnURL;
}
이런식으로 사용한다. 하나의 페이지로 여러개의 화면을 구분하게끔 해준다.


@RedirectAttributes?
폼 형식의 문서를 작성 후 서버로 보내면(POST) 곧이어 다른 페이지로 리다이렉트한다.
문제는 이러한 리다이렉트 방식이 GET 방식이라 데이터 전송에는 적합하지 않다.
리다이렉트 특징은 어떠한 객체를 보내려 했을 때 원래 요청은 끊어지고 새로운 GET 요청이 발생한다.
때문에 리다이렉트 이전의 수행된 모델 데이터는 소멸한다. 따라서 리다이렉트로 전달하는 것은 의미가 없다.
RedirectAttributes는 리다이렉트가 발생하기 전 모든 플래시 속성을 세션에 복사한다. 저장된 플래시 속성을 세션에서 모델로 이동시킨다.
헤더에 파라미터를 붙이지 않기 때문에 URL에 노출되지 않는다.
addFlashAttribute()는 리다이렉트 직전 플래시에 저장하는 메소드이다. 리다이렉트 이후에 소멸한다.

 
@RequestParam(value="idx") int idx
HttpServletRequest랑 같은 역할. RequestParam(가져올데이터) 데이터타입 데이터변수


forward : url 변화 x , 객체의 재사용 o
redirect : url 변화 o, 객체의 재사용 x
로그인, 글쓰기 등 서버나 DB가 변할때는 redirect를 쓰고,
검색, 리스트 보기 등은 forward방식으로 하는게 옳다
객체의 재사용이 없으므로 글이 두번 등록되거나 하는 것을 방지

